generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// New simplified Role model
model Role {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  created_at  DateTime?
  updated_at  DateTime?
  users       User[]
}

// Auth.js / NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Existing models
model article_categories {
  id                     String                   @id @default(uuid())
  name                   String
  slug                   String                   @unique
  deleted_at             DateTime?
  created_at             DateTime?
  updated_at             DateTime?
  article_category_pivot article_category_pivot[]
}

model article_category_pivot {
  id                  BigInt             @id @default(autoincrement())
  article_id          String
  article_category_id String
  deleted_at          DateTime?
  created_at          DateTime?
  updated_at          DateTime?
  article_categories  article_categories @relation(fields: [article_category_id], references: [id], onDelete: Cascade)
  articles            articles           @relation(fields: [article_id], references: [id], onDelete: Cascade)

  @@index([article_category_id])
  @@index([article_id])
}

model article_comments {
  id                     String             @id @default(uuid())
  parent_id              String?
  article_id             String
  name                   String
  email                  String
  comment                String             @db.Text
  is_approved            Boolean            @default(false)
  deleted_at             DateTime?
  created_at             DateTime?
  updated_at             DateTime?
  articles               articles           @relation(fields: [article_id], references: [id], onDelete: Cascade)
  article_comments       article_comments?  @relation("article_commentsToarticle_comments", fields: [parent_id], references: [id], onDelete: Cascade)
  other_article_comments article_comments[] @relation("article_commentsToarticle_comments")

  @@index([article_id])
  @@index([parent_id])
}

model article_tag_pivot {
  id             BigInt       @id @default(autoincrement())
  article_id     String
  article_tag_id String
  deleted_at     DateTime?
  created_at     DateTime?
  updated_at     DateTime?
  articles       articles     @relation(fields: [article_id], references: [id], onDelete: Cascade)
  article_tags   article_tags @relation(fields: [article_tag_id], references: [id], onDelete: Cascade)

  @@index([article_id])
  @@index([article_tag_id])
}

model article_tags {
  id                String              @id @default(uuid())
  name              String
  slug              String              @unique
  deleted_at        DateTime?
  created_at        DateTime?
  updated_at        DateTime?
  article_tag_pivot article_tag_pivot[]
}

model article_visitors {
  id         Int       @id @default(autoincrement())
  visitor_ip String
  article_id String
  created_at DateTime?
  updated_at DateTime?
  articles   articles  @relation(fields: [article_id], references: [id], onDelete: Cascade)

  @@index([article_id])
}

model articles {
  id                     String                   @id @default(uuid())
  thumbnail              String
  title                  String
  content                String                   @db.Text
  slug                   String                   @unique
  writer_id              String
  deleted_at             DateTime?
  created_at             DateTime?
  updated_at             DateTime?
  article_category_pivot article_category_pivot[]
  article_comments       article_comments[]
  article_tag_pivot      article_tag_pivot[]
  article_visitors       article_visitors[]
  writers                writers                  @relation(fields: [writer_id], references: [id], onDelete: Cascade)

  @@index([writer_id])
}

model course_categories {
  id                    String                  @id @default(uuid())
  name                  String
  slug                  String                  @unique
  deleted_at            DateTime?
  created_at            DateTime?
  updated_at            DateTime?
  course_category_pivot course_category_pivot[]
}

model course_category_pivot {
  course_id          String
  course_category_id String
  course_categories  course_categories @relation(fields: [course_category_id], references: [id], onDelete: Cascade)
  courses            courses           @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@id([course_id, course_category_id])
  @@index([course_category_id])
}

model course_reviews {
  id          String    @id @default(uuid())
  course_id   String
  student_id  String
  rating      Int
  review      String
  is_approved Boolean   @default(false)
  created_at  DateTime?
  updated_at  DateTime?
  courses     courses   @relation(fields: [course_id], references: [id], onDelete: Cascade)
  students    students  @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([course_id])
  @@index([student_id])
}

model course_student_groups {
  id              String            @id @default(uuid())
  course_type_id  String
  mentor_id       String
  name            String
  remarks         String?           @db.Text
  start_date      DateTime          @db.Date
  end_date        DateTime          @db.Date
  total_meeting   Int
  deleted_at      DateTime?
  created_at      DateTime?
  updated_at      DateTime?
  course_types    course_types      @relation(fields: [course_type_id], references: [id], onDelete: Cascade)
  mentors         mentors           @relation(fields: [mentor_id], references: [id], onDelete: Cascade)
  course_students course_students[]

  @@index([course_type_id])
  @@index([mentor_id])
}

model course_students {
  id                      String                @id @default(uuid())
  course_student_group_id String
  student_id              String
  deleted_at              DateTime?
  created_at              DateTime?
  updated_at              DateTime?
  course_student_groups   course_student_groups @relation(fields: [course_student_group_id], references: [id], onDelete: Cascade)
  students                students              @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([course_student_group_id])
  @@index([student_id])
}

model course_syllabus {
  id         String    @id @default(uuid())
  course_id  String
  title      String
  sort       Int
  deleted_at DateTime?
  created_at DateTime?
  updated_at DateTime?
  courses    courses   @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@index([course_id])
}

model course_tool_pivot {
  course_id String
  tool_id   String
  courses   courses @relation(fields: [course_id], references: [id], onDelete: Cascade)
  tools     tools   @relation(fields: [tool_id], references: [id], onDelete: Cascade)

  @@id([course_id, tool_id])
  @@index([tool_id])
}

model course_transactions {
  id             String                     @id @default(uuid())
  code           String
  course_id      String
  student_id     String
  type           course_transactions_type
  batch_number   Int?
  status         course_transactions_status @default(unpaid)
  original_price Decimal                    @db.Decimal(20, 4)
  discount       Decimal?                   @db.Decimal(20, 4)
  final_price    Decimal                    @db.Decimal(20, 4)
  deleted_at     DateTime?
  created_at     DateTime?
  updated_at     DateTime?
  courses        courses                    @relation(fields: [course_id], references: [id], onDelete: Cascade)
  students       students                   @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([course_id])
  @@index([student_id])
}

model course_types {
  id                    String                      @id @default(uuid())
  course_id             String
  type                  course_types_type
  batch_number          Int?
  slug                  String                      @unique
  normal_price          Decimal                     @db.Decimal(20, 4)
  discount_type         course_types_discount_type?
  discount              Decimal?                    @db.Decimal(20, 4)
  start_date            DateTime?
  end_date              DateTime?
  is_active             Boolean                     @default(true)
  is_discount           Boolean                     @default(false)
  is_voucher            Boolean                     @default(false)
  deleted_at            DateTime?
  created_at            DateTime?
  updated_at            DateTime?
  course_student_groups course_student_groups[]
  courses               courses                     @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@index([course_id])
}

model courses {
  id                    String                  @id @default(uuid())
  mentor_id             String
  title                 String
  slug                  String                  @db.Text
  description           String                  @db.Text
  thumbnail             String
  trailer               String
  level                 String
  meetings              Int
  is_popular            Boolean                 @default(false)
  is_request            Boolean?                @default(false)
  is_active             Boolean                 @default(true)
  deleted_at            DateTime?
  created_at            DateTime?
  updated_at            DateTime?
  course_category_pivot course_category_pivot[]
  course_reviews        course_reviews[]
  course_syllabus       course_syllabus[]
  course_tool_pivot     course_tool_pivot[]
  course_transactions   course_transactions[]
  course_types          course_types[]
  mentors               mentors                 @relation(fields: [mentor_id], references: [id], onDelete: Cascade)
  mentor_earnings       mentor_earnings[]

  @@index([mentor_id])
}

model event_registrants {
  id               String                   @id @default(uuid())
  event_id         String
  student_id       String
  instagram_follow String?
  payment_proof    String?
  status           event_registrants_status @default(pending)
  deleted_at       DateTime?
  created_at       DateTime?
  updated_at       DateTime?
  events           events                   @relation(fields: [event_id], references: [id], onDelete: Cascade)
  students         students                 @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([event_id])
  @@index([student_id])
}

model event_reviews {
  id          String    @id @default(uuid())
  event_id    String
  student_id  String
  review      String
  is_approved Boolean   @default(false)
  created_at  DateTime?
  updated_at  DateTime?
  events      events    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  students    students  @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([event_id])
  @@index([student_id])
}

model events {
  id                  String              @id @default(uuid())
  mentor_id           String
  title               String
  slug                String
  thumbnail           String
  description         String              @db.Text
  start_date          DateTime
  end_date            DateTime
  price               Decimal?            @db.Decimal(10, 2)
  whatsapp_group_link String
  is_active           Boolean             @default(true)
  deleted_at          DateTime?
  created_at          DateTime?
  updated_at          DateTime?
  event_registrants   event_registrants[]
  event_reviews       event_reviews[]
  mentors             mentors             @relation(fields: [mentor_id], references: [id], onDelete: Cascade)
  mentor_earnings     mentor_earnings[]

  @@index([mentor_id])
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @unique
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.Text
  exception  String   @db.Text
  failed_at  DateTime @default(now())
}

model faq_categories {
  id         String    @id @default(uuid())
  name       String
  deleted_at DateTime?
  created_at DateTime?
  updated_at DateTime?
  faqs       faqs[]
}

model faqs {
  id              String         @id @default(uuid())
  faq_category_id String
  question        String         @db.Text
  answer          String         @db.Text
  deleted_at      DateTime?
  created_at      DateTime?
  updated_at      DateTime?
  faq_categories  faq_categories @relation(fields: [faq_category_id], references: [id], onDelete: Cascade)

  @@index([faq_category_id])
}

model jobs {
  id           BigInt @id @default(autoincrement())
  queue        String
  payload      String @db.Text
  attempts     Int
  reserved_at  Int?
  available_at Int
  created_at   Int

  @@index([queue])
}

model mentor_earnings {
  id         String    @id @default(uuid())
  mentor_id  String
  amount     Decimal   @db.Decimal(20, 4)
  event_id   String?
  course_id  String?
  deleted_at DateTime?
  created_at DateTime?
  updated_at DateTime?
  courses    courses?  @relation(fields: [course_id], references: [id], onDelete: Cascade)
  events     events?   @relation(fields: [event_id], references: [id], onDelete: Cascade)
  mentors    mentors   @relation(fields: [mentor_id], references: [id], onDelete: Cascade)

  @@index([course_id])
  @@index([event_id])
  @@index([mentor_id])
}

model mentors {
  id                    String                  @id @default(uuid())
  user_id               String
  username              String                  @unique
  name                  String
  profile_picture       String?
  gender                mentors_gender
  phone                 String
  city                  String
  specialization        String
  bio                   String                  @db.Text
  deleted_at            DateTime?
  created_at            DateTime?
  updated_at            DateTime?
  course_student_groups course_student_groups[]
  courses               courses[]
  events                events[]
  mentor_earnings       mentor_earnings[]
  users                 User                    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String
  batch     Int
}

model password_reset_tokens {
  email      String    @id
  token      String
  created_at DateTime?
}

model password_resets {
  id         Int       @id @default(autoincrement())
  email      String
  token      String
  created_at DateTime?

  @@index([email])
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement())
  tokenable_type String
  tokenable_id   BigInt
  name           String
  token          String    @unique
  abilities      String?   @db.Text
  last_used_at   DateTime?
  expires_at     DateTime?
  created_at     DateTime?
  updated_at     DateTime?

  @@index([tokenable_type, tokenable_id])
}

model promo_codes {
  id            BigInt                    @id @default(autoincrement())
  code          String
  discount_type promo_codes_discount_type
  discount      Int
  valid_until   DateTime
  is_used       Boolean                   @default(false)
  deleted_at    DateTime?
  created_at    DateTime?
  updated_at    DateTime?
}

model students {
  id                  String                    @id @default(uuid())
  user_id             String
  username            String                    @unique
  name                String
  gender              students_gender?
  occupation_type     students_occupation_type?
  profile_picture     String?
  occupation          String?
  phone               String?
  city                String?
  deleted_at          DateTime?
  created_at          DateTime?
  updated_at          DateTime?
  course_reviews      course_reviews[]
  course_students     course_students[]
  course_transactions course_transactions[]
  event_registrants   event_registrants[]
  event_reviews       event_reviews[]
  users               User                      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model tools {
  id                String              @id @default(uuid())
  logo              String
  name              String
  description       String?             @db.Text
  url               String
  deleted_at        DateTime?
  created_at        DateTime?
  updated_at        DateTime?
  course_tool_pivot course_tool_pivot[]
}

// Modified User model to work with Auth.js
model User {
  id                String     @id @default(uuid())
  name              String?
  email             String     @unique
  email_verified_at DateTime?
  password          String?  
  remember_token    String?
  image             String?
  role_id           String?
  deleted_at        DateTime?
  created_at        DateTime?
  updated_at        DateTime?
  mentors           mentors[]
  students          students[]
  writers           writers[]
  accounts          Account[]
  sessions          Session[]
  role              Role?      @relation(fields: [role_id], references: [id])
}

model writers {
  id              String     @id @default(uuid())
  user_id         String
  username        String     @unique
  name            String
  profile_picture String?
  deleted_at      DateTime?
  created_at      DateTime?
  updated_at      DateTime?
  articles        articles[]
  users           User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

enum course_types_type {
  group
  private
  batch
}

enum promo_codes_discount_type {
  fixed
  percentage
}

enum course_transactions_type {
  group
  private
  batch
}

enum students_gender {
  male
  female
}

enum event_registrants_status {
  pending
  paid
  rejected
}

enum mentors_gender {
  male
  female
}

enum students_occupation_type {
  student
  employee
  business
  other
}

enum course_transactions_status {
  paid
  unpaid
  failed
}

enum course_types_discount_type {
  percentage
  fixed
}